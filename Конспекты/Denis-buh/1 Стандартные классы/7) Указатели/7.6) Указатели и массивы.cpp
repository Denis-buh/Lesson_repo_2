



#include <iostream>
using namespace std;


int main()
{
    system("chcp 1251");

    /*
    Указатели (*) - переменная содержащая адрес из озу какого либо значения/переменной
    Обьявление указателя: тип_данных_указателя  *"имя_переменной" = &"Значение для указателя"; 

    Утечка памяти - процесс при котором неиспользуемые данные засераут озу. 
    Данные данные необходимо удалять в ручную так как нет автаматического уборщика
    & - операция аперсант (ввозращает адрес объекта из оперативы (ОЗУ))
    * - Операция разъименования (позволяет работать со значением (возращает значение из оператоса по адресу)). Эта операция позволяет получить объект по адресу, который хранится в указателе.

    Компилятор преобразует массив в указатели. (любой массив представляет из себя указатель)
    С помощью указателей можно манипулировать элементами массива, как и с помощью индексов.
    Имя массива по сути является адресом его первого элемента. 
    Соответственно через операцию разыменования мы можем получить значение по этому адресу:
    */
    const int LEN = 4;

    int arr_1[LEN] = {1, 2, 3, 4}; 
    cout << "Вывод имени массива без разьименования: " << arr_1 << "\n";
    cout << "Вывод имени массива c разьименованием: " << *arr_1 << "\n";

    int* poun{nullptr};
    poun = arr_1; // Знак амперсанта не нужен так как массив является указателем
    // Аналог: int* poun = arr_1; // Знак амперсанта не нужен так как массив является указателем

    // Изменение массива через указатель
    poun[1] = 7;

    // Обход массива через указатель с помощью арифметики указателей
    for (int i = 0; i < LEN; i += 1){
        cout << "Данные с указателя: " << *(poun ++) << "\tДанные с массива: " << *(arr_1 + i) << "\n"; // Не желательно использовать
        //Более лучший аналог: cout << "Данные с указателя: " << poun[i] << "\tДанные с массива: " << arr_1[i] << "\n"; 
    }


    system("pause");
}