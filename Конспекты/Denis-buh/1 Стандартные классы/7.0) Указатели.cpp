



#include <iostream>
using namespace std;


int main()
{
    system("chcp 1251");

    /*
    Указатели (*) - переменная содержащая адрес из озу какого либо значения/переменной
    Обьявление указателя: тип_данных_указателя  *"имя_переменной" = &"Значение для указателя"; 

    Утечка памяти - процесс при котором неиспользуемые данные засераут озу. 
    Данные данные необходимо удалять в ручную так ка нет автаматического уборщика
    & - операция аперсант (ввозращает адрес из оперативы)
    * - Операция разъименования (позволяет работать со значением (возращает значение из оператоса по адресу))
    */


    int a = 5;
    int* b = &a; // Указатель который ссылается на область озу где расположено значение переменной a (не тоже самое что приваивание).
    // &a - аперсант который дает ссылку на значение a в оперативной памяти

    cout << "Адрес a / указателя b = " << b << "\n"; // Вывод адреса переменной a / указателя b  из озу

    cout << *b << "\n"; // Операция разъименования (позволяет работать со значением (возращает значение из оператоса по адресу))
    cout << "значение a / указателя b = " << *b << "\n"; // Вывод адреса переменной a / указателя b  из озу

    *b = 2; // Меняем значение область озу где расположено значение переменной a через указатель b
    cout << a << "\n";

    cout << "Массивы" << "\n";

    
    const int LEN = 4;
    int my_arr[LEN] = {2, 4, 5, 8};

    int* arr = my_arr; // Здесь не нужно & так как сам масив является указателем
    // Указатель arr работает также как и my_arr

    arr[0] = 1000; // При изменении указателя arr меняется и my_arr


    for (int i = 0; i < LEN; i += 1){
        cout << *(my_arr + i) << " " << *(arr + i) << "\n"; // Арифметика указателей. Не желательно использовать
        // Чтобы происходил коректный здвиг необходимо к масиву прибавлять перемнную с такимже типом как у масива
        // Аналог : cout << my_arr[i] << " " << arr[i] << "\n";
    }
    system("pause");
}