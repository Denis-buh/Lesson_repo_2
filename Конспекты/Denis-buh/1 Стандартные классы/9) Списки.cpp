



#include <iostream>
using namespace std;
#include <list> // Это чтобы списки работали




int cout_call = 0;

void show_list(list <int> my_list){
    cout  << cout_call << " numbers = ";
    for (int n : my_list){
        cout << n << "\t";
    }
    cout << "\n";
    cout_call +=  1;
}

int main(){

    system("chcp 65001");

    /*
    Конструкция создания списка:
        list<"тип данных который должен хранить список"> "имя списка" {"значения списка"}

    */
    // Создание списка
    list <double> list1; // Создание пустого списка
    list <float> list2(5); // Создание списка с длиной 5 и значениями по умолчанию
    list <int> list3(5, 2); // Создание списка с длиной 5 и значениями 2

    // Копирование списка
    list <int> list4(list3); // Копирование списка list3
    // Аналог: list <int> list6 = list3;


    list <int> numbers = {1, 2, 3, 4, 5}; // Создание списка с инициализацией
    // Аналог: list <int> numbers{ 1, 2, 3, 4, 5 };

    // Взаимодействие с длиной списка
    // size("имя списка") - позволяет вернуть количество элементов
    cout << "Длина списка numbers = " << size(numbers) << "\n"; 
    //  empty() - данный метод проверает список на пустоту
    cout << "Список numbers пуст: " << (bool)numbers.empty() << "\n"; 
    /* resize(n, value) - данный метод оставляет в списке n первых элементов. 
    Если список содержит больше элементов, то он усекается до первых n элементов. 
    Если размер списка меньше n, то добавляются недостающие элементы и инициализируются значением по умолчанию (если не указан value) */
    numbers.resize(3); // Усекаем размер списка до 3 элементов


    // Получение элементов из списка
    // метод front() возращает Первый элемент списка
    cout << "Первый элемент списка: " << numbers.front() << "\n";
    // метод back() возращает Последний элемент списка
    cout << "Последний элемент списка: " << numbers.back() << "\n";
    // Перебор элементов списка в цикле с помощью итераций
    cout << "numbers = ";
    for (int n : numbers){
        cout << n << "\t";
    }
    cout << "\n";
    // перебор с помощью указателей
    cout << "numbers = ";
    for (auto iter = numbers.begin(); iter != numbers.end(); iter++){
        // numbers.begin() - ссылка на начало списка
        // numbers.end() - ссылка на конец списка
        cout << *iter << "\t";
    }
    cout << "\n";
    



    // Изменение элементов списка
    // assign(il) метод заменяет содержимое списка элементами из списка il
    numbers.assign({2, 8, 4, 9});
    show_list(numbers);

    // assign(n, value) метод заменяет содержимое списка  n элементами, которые имеют значение value
    numbers.assign(5, 9);
    show_list(numbers);

    // assign(begin, end) метод заменяет содержимое списка элементами из диапазона, на начало и конец которого указывают итераторы begin и end
    numbers.assign(list3.begin(), list3.end()) ;
    show_list(numbers);

    // swap() метод обменивает значениями два списка (работает если у списков 2 одинаковых типа данных)
    list <int> new_list = {2, 4, 7};
    numbers.swap(new_list);
    show_list(numbers);


    // Добавление элементов в список
    // push_back(val) данный метод добавляет значение val в конец списка
    numbers.push_back(6); 
    // push_front(val) данный метод добавляет значение val в начало списка
    // emplace_back(val) данный метод добавляет значение val в конец списка
    // emplace_front(val) данный метод добавляет значение val в начало списка
    show_list(numbers);

    // emplace(pos, val) данный метод вставляет элемент val на позицию, на которую указывает итератор pos. Возвращает итератор на добавленный элемент
    auto iter = numbers.begin(); // итератор указывает на первый элемент списка
    numbers.emplace(iter, 8);
    // insert(pos, val) данный метод вставляет элемент val на позицию, на которую указывает итератор pos. Возвращает итератор на добавленный элемент
    // insert(pos, n, val) данный метод вставляет n элементов val начиная с позиции, на которую указывает итератор pos. Возвращает итератор на первый добавленный элемент. Если n = 0, то возвращается итератор pos.
    /* insert(pos, begin, end) данный метод вставляет начиная с позиции, на которую указывает итератор pos, элементы из другого контейнера из диапазона между итераторами begin и end. 
        Возвращает итератор на первый добавленный элемент. Если между итераторами begin и end нет элементов, то возвращается итератор pos.*/
    /* insert(pos, values) данный метод вставляет список значений values начиная с позиции, на которую указывает итератор pos. 
        Возвращает итератор на первый добавленный элемент. Если values не содержит элементов, то возвращается итератор pos.*/
    show_list(numbers);



    // Удаление элементов из списка
    // pop_back() данный метод удаляет последний элемент
    numbers.pop_back();
    // pop_front() данный метод удаляет первый элемент
    show_list(numbers);

    /* erase(p) данный метод удаляет элемент, на который указывает итератор p. 
        Возвращает итератор на элемент, следующий после удаленного, или на конец контейнера, если удален последний элемент*/
    auto iter1 = numbers.begin(); // указатель на первый элемент
    numbers.erase(iter1); // удаляем первый элемент
    /*erase(begin, end): удаляет элементы из диапазона, на начало и конец которого указывают итераторы begin и end.
        Возвращает итератор на элемент, следующий после последнего удаленного, или на конец контейнера, если удален последний элемент*/
    show_list(numbers);

    // clear() данный метод  удаляет все элементы
    numbers.clear();
    show_list(numbers);


}