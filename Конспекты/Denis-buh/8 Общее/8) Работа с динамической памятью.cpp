



#include <iostream>
using namespace std;


int main()
{
    system("chcp 65001");

    /*
    Конструкция указателя ссылающевося на область динамической памяти
    "тип данных указателя" *"имя указателя" = new "тип данных в дин. памяти";
        new - выделяет область динамической памяти
        "тип данных указателя" = "тип данных в дин. памяти"
    
    После использования динам. памяти необходимо удалить созданные указатели (иначе переполнение памяти)
    delete "имя указателя"; - данная команда освободит место в озу, но указатель ссылающийся на область озу останится
    
    После освобождения места в озу, указатель необходимо занулить (использовать NULL или nullptr). Необходимо для того чтобы понять что эту область озу освободили
    "имя указателя" = NULL; Тоже самое что: "имя указателя" = 0; Устарело
    "имя указателя" = nullptr;
    */

    int *number = new int; // Создание указателя который ссылается на дин. память
    *number = 10; // Добавление данных для указателя который ссылается на дин. память
    cout << "number = " << *number << "\n";

    delete number; // Удаляем указатель из динам. памяти (шобы память освободить)

    //number = NULL; // Зануляем указатель. После зануления можно удалять без ошибок. Есть путаница с int

    //if (number == NULL){
    //    cout << "Указатель прошел через зануление" << "\n";
    //}

    //delete number; 


    number = nullptr; // Зануляем указатель. После зануления можно удалять без ошибок. Нет путаници с int

    if (number == nullptr){
        cout << "Указатель прошел через зануление" << "\n";
    }

    delete number; 




}