



#include <iostream>
using namespace std;


int main()
{
    system("chcp 1251");

    /*
     онструкци€ указател€ ссылающевос€ на область динамической пам€ти
    "тип данных указател€" *"им€ указател€" = new "тип данных в дин. пам€ти";
        new - выдел€ет область динамической пам€ти
        "тип данных указател€" = "тип данных в дин. пам€ти"
    
    ѕосле использовани€ динам. пам€ти необходимо удалить созданные указатели (иначе переполнение пам€ти)
    delete "им€ указател€"; - данна€ команда освободит место в озу, но указатель ссылающийс€ на область озу останитс€
    
    ѕосле освобождени€ места в озу, указатель необходимо занулить (использовать NULL или nullptr). Ќеобходимо дл€ того чтобы пон€ть что эту область озу освободили
    "им€ указател€" = NULL; “оже самое что: "им€ указател€" = 0; ”старело
    "им€ указател€" = nullptr;
    */

    int *number = new int; // —оздание указател€ который ссылаетс€ на дин. пам€ть
    *number = 10; // ƒобавление данных дл€ указател€ который ссылаетс€ на дин. пам€ть
    cout << "number = " << *number << "\n";

    delete number; // ”дал€ем указатель из динам. пам€ти (шобы пам€ть освободить)

    //number = NULL; // «анул€ем указатель. ѕосле занулени€ можно удал€ть без ошибок. ≈сть путаница с int

    //if (number == NULL){
    //    cout << "”казатель прошел через зануление" << "\n";
    //}

    //delete number; 


    number = nullptr; // «анул€ем указатель. ѕосле занулени€ можно удал€ть без ошибок. Ќет путаници с int

    if (number == nullptr){
        cout << "”казатель прошел через зануление" << "\n";
    }

    delete number; 
    system("pause");
}