



#include <iostream>

using namespace std;



class My_class{
private:
    /* Создание инкапсулированных атрибутов
    Данные атрибуты/методы могут использоватся только в классе
    */
    int super_number;
    void pri_fun(){
        cout << "Вызов функции pub_fun\n";
    }

protected:
    /* Создание защищеных атрибутов
    Данные атрибуты/методы могут использоватся только в классе или в классах производным от данного.
    */
    int s_number; 
    void pro_fun(){
        cout << "Вызов функции pro_fun\n";
    }

public:
    /* Создание публичных атрибутов
    Данные атрибуты/методы доступны в любой части программы
    */
    int number;
    void print_inform(); // Обьявление метода который будет обьявлен вне класса 
    void fun(){
        /*В методе мы можем обращатся к любым атрибутам/методам*/
        /* this - данная штука ссылается на действующий объект класса
        this->super_number- данная штука запрашивает атрибут у действующего объекта класса
        this обязателен при задании значения атрибутам класса
        Также с помощью this  можно вернуть текущий объект класса
            return *this
        */
        this->super_number = 25;
        this->s_number = 20;
        this->number = 10;
        cout << "super_number: " << super_number << ", s_number: " << s_number << ", number: " << number << "\n";
        // Вызов методов класса
        pro_fun();
        pri_fun();
    }

};

/* Добавление метода вне класса
Позволяет добавлять метод класса вне класса
Конструкция:
    "имя_класса"::"имя_функции(параметры)"{ 
        "тело_функции"
    }.
*/
void My_class::print_inform(){
    cout << "Вызов print_inform\n";
}


int main(){
    system("chcp 1251"); 

    My_class new_class;

    // Обращение к публичным методам класса
    new_class.fun();
    new_class.print_inform();
    // За классом мы можем использовать только public методы

    cout << "\nРабота с указателями\n\n";

    /* Обращение к методам через указатель*/
    My_class* ptr_class = &new_class; // Создание указателя на new_class
    // Обращение к публичным методам класса через указатель
    ptr_class -> fun();
    ptr_class -> print_inform();


    system("pause");
}
