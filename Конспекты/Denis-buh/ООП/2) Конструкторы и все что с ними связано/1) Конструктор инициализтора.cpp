



#include <iostream>

using namespace std;



class My_class{
private:
    int number; // Какой-то атрибут класса
    string state;

public:
    /*Добаление конструктора для класса
    Конструкторы представляют специальную функцию, которая имеет то же имя, что и класс. 
    Данная функция не возвращает никакого значения и позволяют инициалилизировать объект класса во время его создания.
    Данная функция гарантирует что, что поля класса будут иметь определенные значения. 
    При каждом создании нового объекта класса вызывается конструктор класса.
    Конструкция:
    "название класса"("аргументы для конструктора класса"){
        "действия конструктора класса"
    }
    */
    My_class(int number){
        // Данный конструктор используется когда класс инициализируют 1 параметром
        this->number = number; 
    }

    My_class(int number, string state){
        // Данный конструктор используется когда класс инициализируют 2 параметрами
        this->number = number; 
        this->state = state;
        cout << "Статус: " << this->state << "\n";
    }
    // Конструктор копирования (используется когда инициализирем обьектом это-го же класса)
    My_class(const My_class& opt){
        this->number = opt.number; 
        this->state = opt.state;
    }
    // Конструктор по умолчанию (используется когда создаем обьект без инициализации)
    // Обычно такие конструкторы использую для того что-бы создать путой объект с последующей инициализацией
    My_class(){}


};



int main(){
    system("chcp 1251"); 
    // Создаем обьект с 1 аргументом для инициализации
    My_class new_class(4);
    // Создаем обьект с 2 аргументами для инициализации
    My_class new_class2(4, "Все прекрасно");
    // Создаем обьект с помощью конструктора копирования
    My_class new_class3(new_class2);
    // Создаем обьект с помощью конструктора по умолчанию
    My_class new_class4;



    system("pause");
}
