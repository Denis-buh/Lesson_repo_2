



#include <iostream>

using namespace std;



class My_class{
private:
    int number;

public:
    My_class(int number){
        this->number = number; 
        cout << "Объект класса My_class создан\n";
    }

    int get_number(){
        return this->number;
    }

    /* Деструктор выполняет освобождение использованных объектом ресурсов и удаление нестатических переменных объекта. Деструктор автоматически вызывается, когда удаляется объект. 
    Удаление объекта происходит в следующих случаях:
        1) когда завершается выполнение области видимости, внутри которой определены объекты
        2) когда удаляется контейнер (например, массив), который содержит объекты
        3) когда удаляется объект, в котором определены переменные, представляющие другие объекты
        4) динамически созданные объекты удаляются при применении к указателю на объект оператора delete
    Деструктор не имеет возвращаемого значения и не принимает параметров. Каждый класс может иметь только один деструктор.
    Конструкция деструктора:
        ~"имя класса()"{
            "действия деструктора"
        }
    */
    ~My_class(){
        cout << "Объект класса My_class удален\n";
    }

};



int main(){
    system("chcp 1251"); 

    My_class* pr = new My_class(0);

    cout << "number = "  << pr->get_number() << "\n";

    delete pr;

    {
        My_class new_odj = My_class(2);

        cout << "number = " << new_odj.get_number() << "\n";
    }

    system("pause");
}
