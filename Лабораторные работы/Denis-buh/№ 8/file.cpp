/*
Задание. 
    - Определить структурный шаблон в соответствии с индивидуальным вариантом.
    - Создать динамический массив типа разработанного структурного шаблона из 10 элементов.
    
    - Осуществить ввод данных для элементов массива с клавиатуры. При вводе 
    -    данных обеспечить проверку их правильности.

    -Обеспечить вывод полученных данных на экран в виде отформатированной
    -    таблицы. Столбцы таблицы должны соответствовать полям шаблона и иметь наименования.

    Организовать интерфейс пользователя на основе меню, обязательными
        пунктами которого будут: ввод данных, вывод всей информации, выход из программы. 
        Остальные пункты меню определить в соответствии вариантом.

Методические указания.
    - Проверка правильности ввода подразумевает проверку на достоверность 
    -     введенных количественных значений: 
    -     номер месяца должен быть в диапазоне от 1 до 12, 
    -     стоимость товара не может быть отрицательной, 
    -     возраст человека не превышает 100 лет и пр. 
    - В случае неверного ввода, программа должна запросить повтор на ввод и осуществить его.

Меню организовать с использованием циклического вывода его пунктов в консоль и оператора switch. 
Ветви оператора switch должны соответствовать номерам пунктов меню. 
Предусмотреть обработку ввода неверного номера пункта меню.
При выводе набора значений использовать форматирование.
Все выводимые данные должны быть отформатированы и размещены в 
    удобном для восприятия пользователя виде (например, в виде таблицы). 
При сортировке данных применять эффективные методы сортировки.
Не забыть о выводе сообщений пользователю в случае, если искомые данные в списке не обнаружены.

Вариант 2: 
-В структурном шаблоне должны содержаться следующие сведения:
-    название команды первенства по футболу, 
-    город, 
-    количество набранных очков.
-Отсортировать наименования команд в порядке убывания набранных очков. 
-Добавить в массив сведения еще об одной команде. 
Определить, какое место она заняла в общем списке. 
Вывести на экран названние команд, набравших меньше очков, чем последняя введенная команда
*/

#include <iostream>
#include <iomanip> // Для форматного вывода
#include <string>
// Тут структура футбольной команды
#include "foot_comand.cpp"

using namespace std; 

// Структура с футбольными командами
struct Commands_footbal{
private:
    Football_comand* arr_command = nullptr; // Массив футбольных команд
    int len_mass_command; // Размер массива 
    bool state_information = false; // Статус информации (не определена)

    // Необходима для создания футбольных команд
    Football_comand made_command(int nimber){
        while (true){
            cout << "Введите данные для команды под №" << nimber << "\n";
            string name_command; // название команды по футболу
            while(true){
                cout << "Введите название команды: ";
                getline(cin, name_command);
                // Если строка не пустая
                if (size(name_command) != 0)  {break;}
                cout << "Неправильно. Строка пустая.\n";
            }

            string city; // город команды
            while(true){
                cout << "Введите город команды: ";
                getline(cin, city);
                // Если строка не пустая
                if (size(city) != 0)  {break;}
                cout << "Неправильно. Строка пустая.\n";
            }

            float points; // количество набранных очков 
            while(true){
                try{
                    string temp_points; // Временная переменная 
                    cout << "Введите количество набранных очков команды: ";
                    getline(cin, temp_points);
                    // Переводим из строки в дробь
                    points = stof(temp_points); 
                    // Если пользователь сделал как надо (в противном случае исключение)
                    break;
                }
                // Если словили исключение 
                catch (...)  {cout << "Неправильно. Строка пустая или в ней буквы (а надо цифры).\n";}
            }
            cout << "Для команды с № " << nimber << "\nВы ввели следующие данные:\n";
            cout << "\tНазвание команды: " << name_command << "\n";
            cout << "\tГород команды: " << city << "\n";
            cout << "\tКоличество набранных очков " << points << "\n";
            cout << "Согласы ли вы перезаписать параметры команды (Y - да/N - нет)";
            int flag = system("CHOICE");
            system("cls"); // Чистим консоль 
            // Если пользователь не захотел переписывать параметры
            if (flag == 2)  {return Football_comand(name_command, city, points);}
        }
    }

public:
    // Инициализируем структуру
    Commands_footbal(int len_mass_command){
        // Устанавливаем размер массива
        this->len_mass_command = len_mass_command;
        // Создаем массив
        arr_command = new Football_comand[len_mass_command];
    }

    // Финализатор структуры (это когда будем удалять струтуру)
    ~Commands_footbal(){
        // Удаляем динамический масив
        delete []arr_command;
        arr_command = nullptr; 
    }

    // Производим регистрацию команд (начальный ввод данных)
    void registration(){
        for (int i = 0; i < len_mass_command; i += 1){
            this->arr_command[i] =  this->made_command(i + 1); 
        }
        // Сообщаем классу что информация указана
        this->state_information = true; 
    } 

    bool get_state_information()  {return this->state_information;}

    // Данная функция сортирует масив команд
    void sort(){
        if (not this->state_information){
            // Если информация не была указана
            cout << "Что бы сортировать инофрмацию ее нужно сначала ввести\n"; 
            system("pause");
            // Убиваем функцию (так как дальше нет смысла)
            return; 
        }

        for(int i = 0; i < len_mass_command - 1; i += 1){
            // Подразумеваем что первый элемент максимальный
            int index_max_irem = i; 
            for (int ii = i + 1; ii < len_mass_command; ii += 1){
                if (arr_command[ii].get_points() > arr_command[index_max_irem].get_points())  {index_max_irem = ii;}
            }
            // Если ничего не изменилось
            if (index_max_irem == i) {continue;}
            // Если изменения были
            Football_comand temp = Football_comand(arr_command[i]);
            arr_command[i] = arr_command[index_max_irem];
            arr_command[index_max_irem] = temp;
        }
        cout << "Сортировка выполнена\n";
        system("pause");
    }

    // Данная функция выводи массив на форматную печать
    /**
     * 
    */
    void print(int start_with = 0){
        if (not this->state_information){
            // Если информация не была указана
            cout << "Что бы вывести инофрмацию ее нужно сначала ввести\n"; 
            system("pause");
            // Убиваем функцию (так как дальше нет смысла)
            return; 
        }
        // Если все же данные были внесены 
        // Устанавливаем выравнивание по левому краю
        cout.setf(ios::left);
        cout << setw(20) << "Название команды" << "|";
        cout << setw(20)  << "Город команды" << "|";
        cout << setw(20)  << "Очки команды" << "|";
        cout << "\n"; 
        for (int i = start_with; i < len_mass_command; i += 1){
            arr_command[i].fprint();
        }
        system("pause");
    }
    // Добавляет новую команду в массив
    void append_command(){
        // Если до этого не было ввода информации
        if (not this->state_information){
            // Если информация не была указана
            cout << "Что бы добавить новую команду необходимо заполнить информацию по прошлым " << this->len_mass_command << " командам\n"; 
            system("pause");
            // Убиваем функцию (так как дальше нет смысла)
            return; 
        }

        // Создаем новую команду
        Football_comand command = this->made_command(this->len_mass_command + 1);
        // Новый размер масива
        int new_len_mass_command = this->len_mass_command + 1;
        // Новый масив
        Football_comand* new_arr_command = new Football_comand[new_len_mass_command];
        // Сохраняем информацию в новый масив
        for (int i = 0; i < this->len_mass_command; i += 1){
            new_arr_command[i] = arr_command[i];
        };
        // Добавляем новую команду в новый массив
        new_arr_command[len_mass_command] = command;
        // Удаляем старый массив
        delete []arr_command;
        // Ссылаемся на новый масив и новый размер
        arr_command = new_arr_command;
        len_mass_command = new_len_mass_command;
        // Сортируем массив команд
        this->sort();
        int position; // Позиция новой добавленой команды
        // Определяем позицию новой вкладки
        for (int i = 0; i < this->len_mass_command; i += 1){
            if (arr_command[i].get_name_command() == command.get_name_command())  {position = i;}
        }
        cout << "Общий список команд\n";
        this->print();
        cout << "Позиция новой команды в общем списке = " << position + 1 << "\n";
        cout << "Команды которые набрали меньше балов чем последняя введеная команда\n";
        this->print(position + 1);
    }
};


int main(){
    // Добавление локализации
    system("chcp 1251");
    // Создаем структуру-контейнер для хранения и обработки 10 футбольных команд
    Commands_footbal football_commands = Commands_footbal(2/*10*/);

    while(true){
        system("cls");
        int action; // Действие 
        cout << "Возможные действия:\n";
        cout << "\t1) Ввод данных\n";
        cout << "\t2) Вывод информации\n";
        cout << "\t3) Сортировка данных\n";
        cout << "\t4) Добавление команды\n";
        cout << "\t5) Выход из программы\n";
        cout << "Для выполнения команды введите номер команды: ";
        try{
            string temp_action;
            getline(cin, temp_action);
            // Переводим из строки в дробь
            action = stoi(temp_action); 
            // Ели пользователь понял что от него хотят
        }
        catch (...) {
            // Ели пользователь не понял что от него хотят
            cout << "Неправильно. Строка пустая или в ней буквы (а надо цифры).\n";
            system("pause");
            continue;
        }
        switch (action){
            case 1: // Ввод данных
                system("cls");
                football_commands.registration();
                break;

            case 2: // Вывод информации
                system("cls");
                football_commands.print();
                break;

            case 3: // Сортировка данных
                system("cls");
                football_commands.sort();
                break;
            case 4: // Добавление команды
                system("cls");
                football_commands.append_command();
                break;
            case 5: // Выход из программы
                return 0; 

            default:
                // Так как все возможные варинты были перепробаваны то остаются невозможные варианты
                cout << "Было введено не верное значение\n";
                system("pause");
                break;

        }
    }
}